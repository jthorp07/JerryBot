import { readdirSync } from "fs";
import { join } from "path";
import { Collection, Events, Interaction } from "discord.js";
import { IModal } from "../../types/discord_interactions";
import { IEventHandler } from "../../types/event_handler";

const path = join(__dirname, "../../modals")
const eventHandler: IEventHandler = {

    event: Events.InteractionCreate,
    handlerFactory: (_, __) => {

        const modals = new Collection<String, IModal>();
        const files = (() => {
            try {
                return readdirSync(path).filter(file => file.endsWith(".js"));
            } catch (err) {
                return [];
            }
        }).call(this);
        if (files.length == 0) return async (interaction: Interaction) => {
            if (!interaction.isModalSubmit()) return;
            await interaction.reply({ content: `Something went wrong, and buttons cannot be handled at the moment. Please report this to a staff member.` });
        }

        for (const file of files) {

            const cmd = require(join(__dirname, `../../modals/${file}`)) as { default: IModal };
            try {
                console.log(`[Modals]: Reading button ${cmd.default.customId}`);
                modals.set(cmd.default.customId, cmd.default)
            } catch (error) {
                console.log(`[Modals]: Error in file ${file}`);
                continue;
            }
        };
        return async (interaction: Interaction) => {
            if (!interaction.isModalSubmit()) return
            let idArgs = interaction.customId.split(':');
            if (!idArgs || idArgs.length === 0) {
                console.error(`[Error]: Button idArgs parsing error for ID ${interaction.customId}`);
                return;
            }
            let cmd: IModal | undefined = modals?.get(idArgs[0]);

            if (cmd === undefined) {
                await interaction.reply({ content: 'Unknown interaction. If a command or component generated by JerryBot generated this response, please report it!' })
                return;
            }
            await cmd.execute(interaction, idArgs);
        }
    },
    useHandler: true
}

export default eventHandler;