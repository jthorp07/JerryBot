import { readdirSync } from "fs";
import { join } from "path";
import { AnySelectMenuInteraction, Collection, Events, Interaction } from "discord.js";
import { ISelectMenu } from "../../types/discord_interactions";
import { IEventHandler } from "../../types/event_handler";

const path = join(__dirname, '../../selectmenus')
const eventHandler: IEventHandler = {
    event: Events.InteractionCreate,
    handlerFactory: (ignored, permCheck) => {
        const selectMenus = new Collection<String, ISelectMenu>();
        const files = (() => {
            try {
                return readdirSync(path).filter(file => file.endsWith(".js"));
            } catch (err) {
                return [];

            }
        }).call(this);
        if (files.length == 0) return async (interaction: Interaction) => {
            if (!interaction.isAnySelectMenu()) return;
            await interaction.reply({ content: `Something went wrong, and select menus cannot be handled at the moment. Please report this to a staff member.` });
        }

        for (const file of files) {

            const cmd = require(join(__dirname, `../../selectmenus/${file}`)) as { default: ISelectMenu };
            try {
                console.log(`[Select Menus]: Reading select menu ${cmd.default.customId}`);
                selectMenus.set(cmd.default.customId, cmd.default)
            } catch (error) {
                console.log(`[Select Menus]: Error in file ${file}`);
                continue;
            }
        };
        return async (interaction: Interaction) => {
            if (!interaction.isAnySelectMenu()) return
            let cmdInteraction: AnySelectMenuInteraction = interaction;
            let idArgs = cmdInteraction.customId.split(':');
            if (!idArgs || idArgs.length === 0) {
                console.error(`[Error]: Select menu idArgs parsing error for ID ${cmdInteraction.customId}`);
                return;
            }
            const cmd: ISelectMenu | undefined = selectMenus?.get(idArgs[0]);

            if (cmd === undefined) {
                await interaction.reply({ content: "Unknown interaction. If a command or component generated by JerryBot generated this response, please report it!" })
                return;
            }

            if (permCheck) {
                let authenticated = await permCheck(cmd.permissions, interaction);
                if (!authenticated) {
                    await interaction.editReply({ content: "You do not have the right permissions to use this selectmenu!" });
                    return;
                }
            } 

            await cmd.execute(cmdInteraction, []);
        }
    },
    useHandler: true,
}

export default eventHandler;