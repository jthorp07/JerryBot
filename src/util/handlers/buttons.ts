import { readdirSync } from "fs";
import { join } from "path";
import { Client, Collection, Events, Interaction } from "discord.js";
import { IButton } from "../../types/discord_interactions";
import { IEventHandler } from "../../types/event_handler";

const buttonEventHandler: IEventHandler = {

    event: Events.InteractionCreate,
    handlerFactory: (client, permCheck) => {

        const buttons = new Collection<String, IButton>();
        const commandFiles = readdirSync(join(__dirname, "../../buttons")).filter(file => file.endsWith(".js"));

        for (const file of commandFiles) {

            const cmd = require(join(__dirname, `../../buttons/${file}`)) as { default: IButton };
            try {
                console.log(`[Buttons]: Reading button ${cmd.default.customId}`);
                buttons.set(cmd.default.customId, cmd.default)
            } catch (error) {
                console.log(`[Buttons]: Error in file ${file}`);
                continue;
            }
        };
        return async (interaction: Interaction) => {
            if (!interaction.isButton()) return
            let idArgs = interaction.customId.split(':');
            if (!idArgs || idArgs.length === 0) {
                console.error(`[Error]: Button idArgs parsing error for ID ${interaction.customId}`);
                return;
            }
            let cmd: IButton | undefined = buttons?.get(idArgs[0]);

            if (cmd === undefined) {
                await interaction.reply({ content: 'Unknown interaction. If a command or component generated by JerryBot generated this response, please report it!' })
                return;
            }

            if (permCheck) {
                let authenticated = await permCheck(cmd.permissions, interaction);
                if (!authenticated) {
                    await interaction.editReply({ content: "You do not have the right permissions to use this selectmenu!" });
                    return;
                }
            }

            await cmd.execute(interaction, idArgs);
        }
    }
}

export default buttonEventHandler;